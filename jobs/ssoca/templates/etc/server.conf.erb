<%=

ssoca_client_version = '0.17.0'

config = {
  'env' => {
    'banner' => p('env.banner'),
    'name' => p('env.name'),
    'title' => p('env.title'),
    'url' => p('env.url'),
    'metadata' => p('env.metadata'),
    'support_older_clients' => true,
    'default_auth_service' => 'auth',
  },
  'server' => {
    'host' => p('server.host'),
    'port' => p('server.port'),
    'redirect' => {
      'root' => p('server.redirect.root'),
      'auth_failure' => p('server.redirect.auth_failure'),
      'auth_success' => p('server.redirect.auth_success'),
    },
  },
  'certauths' => p('certauths'),
  'services' => p('services'),
}

config['services'].push({
  'name' => 'auth',
  'type' => "#{p('auth.type')}_authn",
  'options' => p('auth.options'),
})

if_p('server.certificate', 'server.private_key') do
  config['server']['certificate_path'] = '/var/vcap/jobs/ssoca/etc/server.crt'
  config['server']['private_key_path'] = '/var/vcap/jobs/ssoca/etc/server.key'
end

if_p('server.trusted_proxies') do |v|
  config['server']['trusted_proxies'] = v.map do |v|
    # IPv6 with a colon prefix looks like a symbol to the YAML parser
    # see https://github.com/cloudfoundry/bosh/issues/2113
    v = ":#{v}" if v.is_a?(Symbol)
    v
  end
end

if_p('server.robotstxt') do |v|
  config['server']['robotstxt'] = v
end

if_link('openvpn') do |openvpn|
  if config['services'].any? { |service| service['type'] == 'openvpn' && (!service.has_key?('name') || service['name'] == 'openvpn' ) }
    raise "Cannot use 'openvpn' link when the 'services' property is already configuring a service named 'openvpn'."
  end

  service = {
    'name' => 'openvpn',
    'type' => 'openvpn',
    'require' => p('openvpn_service_link.require'),
    'options' => {
      'certauth' => p('openvpn_service_link.options.certauth'),
      'validity' => p('openvpn_service_link.options.validity'),
      'profile' => [
        'client',
        'dev tun',
        'nobind',
        'resolv-retry infinite',
        'persist-key',
        'persist-tun',
        'verb 3',
        'mute 20',
        'mute-replay-warnings',
        "cipher #{openvpn.p('cipher')}",
        'tls-client',
        'remote-random',
        'remote-cert-tls server',
      ],
    },
  }

  openvpn.instances.each do | remote |
    service['options']['profile'].push "remote #{remote.address} #{openvpn.p('port')} #{openvpn.p('protocol')}"
  end

  openvpn.if_p('keysize') do | v |
    service['options']['profile'].push "keysize #{v}"
  end

  openvpn.if_p('tls_cipher') do | v |
    service['options']['profile'].push "tls-cipher #{v}"
  end

  openvpn.if_p('tls_version_min') do | v |
    service['options']['profile'].push "tls-version-min #{v}"
  end

  openvpn.if_p('tls_crypt') do | v |
    service['options']['profile'].push "<tls-crypt>", v, "</tls-crypt>"
  end

  openvpn.if_p('extra_client_configs') do | v |
    service['options']['profile'].push *v
  end

  service['options']['profile'] = service['options']['profile'].join("\n")

  config['services'].push service
end

if p('enable_ui')
  config['services'].push({
    'name' => 'ui',
    'type' => 'docroot',
    'options' => {
      'path' => '/var/vcap/packages/ssoca/ui',
    },
    'require' => [
      { 'public' => nil },
    ],
  })

  if config['server']['redirect']['root'] == ''
    config['server']['redirect']['root'] = '/ui/'
  end

  if config['server']['redirect']['auth_success'] == ''
    config['server']['redirect']['auth_success'] = '/ui/auth-success.html'
  end

  if config['server']['redirect']['auth_failure'] == ''
    config['server']['redirect']['auth_failure'] = '/ui/auth-failure.html'
  end
end

if p('enable_client_downloads')
  config['env']['update_service'] = 'ssoca-client'
  config['services'].push({
    'name' => 'ssoca-client',
    'type' => 'download',
    'options' => {
      'metadata' => {
        'version' => ssoca_client_version,
      },
      'glob' => '/var/vcap/packages/ssoca-clients/ssoca-client-*',
    },
    'require' => [
      { 'public' => nil },
    ],
  })
end

JSON.pretty_generate(config)

%>
